package output;

import analyzer.Analyzer;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.charts.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

/**
 * Class using for output information that generated by {@link Analyzer} class.<br>
 * Now it have only one operation
 */
public class Output {

    public static final String excelFilePath = "./NC_Lab_RESULTS.xlsx";
    private Map<String, Map<String, List<Long>>> result;
    Analyzer analyzer;
    private int amountOfRows;

    public Output() {

        analyzer = new Analyzer();
        result = new HashMap<>(analyzer.analize());
        createBaseForExcelFile();
    }

    private void createBaseForExcelFile() {

        Workbook workbook = new XSSFWorkbook();

        for (Map.Entry<String, Map<String, List<Long>>> fillers : result.entrySet()) {
            Sheet sheet = workbook.createSheet(fillers.getKey());

            Row headerRow = sheet.createRow(0);

            int iteratorForColumns = 0;
            Cell zeroCell = headerRow.createCell(iteratorForColumns);
            zeroCell.setCellValue("Sorter name");

            int length = analyzer.getBeginLength();
            while (length < analyzer.getMaxArrayLength()) {
                iteratorForColumns++;
                Cell cell = headerRow.createCell(iteratorForColumns);
                cell.setCellValue(length *= analyzer.getIncreaseValue());
            }

            setDateIntoExcelFile(fillers, sheet);

            for (int i = 0; i < iteratorForColumns; i++) {
                sheet.autoSizeColumn(i);
            }

            createChart(sheet, iteratorForColumns);

        }
        fileOpenAndWrite(workbook);
    }

    private void setDateIntoExcelFile(Map.Entry<String, Map<String, List<Long>>> fillers, Sheet sheet) {
        amountOfRows = 1;

        for (Map.Entry<String, List<Long>> sorters : fillers.getValue().entrySet()) {

            Row row = sheet.createRow(amountOfRows++);
            int iteratorForListResults = 0;
            row.createCell(iteratorForListResults).setCellValue(sorters.getKey());

            for (Long resultValue : sorters.getValue()) {
                iteratorForListResults++;
                row.createCell(iteratorForListResults).setCellValue(resultValue);
            }
        }
    }

    private void createChart(Sheet sheet, int amountOfColumns){
        Drawing drawing = sheet.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 1, 0, 0, 0, amountOfRows + 3, 15, amountOfRows + 25);
        Chart chart = drawing.createChart(anchor);
        ChartLegend legend = chart.getOrCreateLegend();
        legend.setPosition(LegendPosition.RIGHT);

        LineChartData data = chart.getChartDataFactory().createLineChartData();

        ChartAxis bottomAxis = chart.getChartAxisFactory().createCategoryAxis(AxisPosition.BOTTOM);
        ValueAxis leftAxis = chart.getChartAxisFactory(). createValueAxis(AxisPosition.LEFT);
        leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);
        ChartDataSource<Number> xs = DataSources.fromNumericCellRange(sheet, new CellRangeAddress(0, 0, 1, amountOfColumns ));


        for(int i = 1; i < amountOfRows; i++){
            LineChartSeries series = data.addSeries(xs, DataSources.fromNumericCellRange(sheet, new CellRangeAddress(i, i, 1, amountOfColumns )));
            series.setTitle(sheet.getRow(i).getCell(0).getStringCellValue());
        }

        chart.plot(data, new ChartAxis[] { bottomAxis, leftAxis });

    }

    private void fileOpenAndWrite(Workbook workbook) {
        // Write the output to a file
        try {
            FileOutputStream fileOut = new FileOutputStream(excelFilePath);
            workbook.write(fileOut);
            fileOut.close();

            // Closing the workbook
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}